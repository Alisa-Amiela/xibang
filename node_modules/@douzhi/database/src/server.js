const express = require("express");
const multer = require("multer");
const bodyParser = require("body-parser");
const Request = require("./request");
const storage = multer.diskStorage({
  destination(req, file, cb) {
    cb(null, "./upload/");
  },
  filename(req, file, cb) {
    const arr = file.originalname.split(".");
    cb(null, Date.now() + "." + arr[arr.length - 1]);
  }
});
const upload = multer({ storage });

class Server {
  static getInstance() {
    if (!this.instance) {
      this.instance = new Server();
    }
    return this.instance;
  }

  constructor() {
    this.instance = null;
    this.dataReadyTasks = [];
    this.routes = {};
    this.app = express();
    this.app.use(function(req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      next();
    });
    this.app.use(bodyParser.urlencoded({ extended: true }));
    this.app.listen(3000, () =>
      console.log(
        "Service is running.Please visit http://localhost:3000 for data"
      )
    );
  }

  whenApi(url) {
    this.url = url;
    return this;
  }
  response(content) {
    let url = this.url;
    this.app.get(url, (req, res) => {
      let data;
      if (this.dataReadyTasks[url] !== undefined) {
        data = this.dataReadyTasks[url](new Request(req));
      }
      let totalCount = 1;
      if (Array.isArray(data)) {
        totalCount = data.length;
        if (req.query.limit !== undefined && req.query.page !== undefined) {
          data = data.filter((value, key) => {
            let min = parseInt((req.query.page - 1) * req.query.limit);
            let max = parseInt(req.query.limit) + min;
            return key >= min && key < max;
          });
        }
      }
      if (
        this.routes[url] !== undefined &&
        this.routes[url]["layuiFormat"] === true
      ) {
        data = {
          code: 0,
          count: totalCount,
          data: data
        };
      }
      res.send(content || data);
    });
    this.app.post(url, upload.single("photo"), (req, res) => {
      let data;
      if (this.dataReadyTasks[url] !== undefined) {
        data = this.dataReadyTasks[url](new Request(req));
      }
      res.send(content || data);
    });
  }

  dataReady(callback) {
    this.dataReadyTasks[this.url] = callback;
    return this;
  }

  layuiFormat() {
    this.routes[this.url] = { layuiFormat: true };
    return this;
  }
}

module.exports = Server;
