Vue.component("dz-button", {
  props: {
    to: String,
    size: {
      type: String,
      default: "xs"
    },
    theme: {
      type: String,
      default: ""
    },
    deleteUrl: String
  },
  render(createElement) {
    let options = { class: { "layui-btn": true } };
    options["class"]["layui-btn-" + this.$props.size] = true;
    options["class"]["layui-btn-" + this.$props.theme] = true;
    if (this.$props.deleteUrl) {
      options["attrs"] = {
        "lay-event": "del",
        "delete-url": this.$props.deleteUrl
      };
    }
    if (this.$props.to) {
      let page = this.$props.to.split("?")[0];
      this.$router.addRoutes([
        {
          path: page,
          component: function(resolve) {
            // axios
            //   .get(path.substr(1) + ".html?t=" + new Date().getTime())
            //   .then(function(rps) {
            //     resolve({
            //       template: rps.data
            //     });
            //   });
            function getHtml() {
              return axios.get(page.substr(1) + ".html");
            }
            function getScript() {
              return axios.get(page.substr(1) + ".js");
            }
            axios.all([getHtml(), getScript()]).then(
              axios.spread((html, js) => {
                let options = {};
                if (js && js.data) {
                  let script = document.createElement("script");
                  script.innerHTML =
                    "define('" +
                    page.substr(1) +
                    "', function(){ return " +
                    js.data +
                    "})";
                  document.head.appendChild(script);
                  options = require(page.substr(1));
                  let data = JSON.parse(JSON.stringify(options["data"]));
                  options["data"] = function() {
                    return data;
                  };
                }
                if (!html.data) {
                  layer.msg(page + ".html is empty.");
                  return false;
                }
                options["template"] = html.data;
                resolve(options);
              })
            );
          }
        }
      ]);
      options["props"] = { to: this.$props.to };
      return createElement("router-link", options, this.$slots.default);
    } else {
      return createElement("a", options, this.$slots.default);
    }
  }
});
