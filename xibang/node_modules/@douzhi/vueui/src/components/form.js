Vue.component("dz-form", {
  props: ["dataUrl", "action"],
  data() {
    return {
      record: {}
    };
  },
  render: function(createElement) {
    for (let key in this.record) {
      this.$slots.default.forEach(element => {
        let cptOptions = element.componentOptions;
        if (cptOptions !== undefined) {
          if (
            cptOptions.tag === "dz-input" ||
            cptOptions.tag === "dz-datepicker" ||
            cptOptions.tag === "dz-textarea"
          ) {
            if (cptOptions.propsData.name === key) {
              if (element.elm !== undefined) {
                element.elm.querySelector(
                  "[name=" + key + "]"
                ).value = this.record[key];
              }
            }
          }
        }
      });
    }
    let childrens = [this.$slots.default];
    if (this.record["photo"]) {
      childrens.push(
        createElement("input", {
          attrs: { type: "hidden", name: "photo", value: this.record["photo"] }
        })
      );
    }
    return createElement(
      "div",
      {
        class: { "layui-form": true }
      },
      childrens
    );
  },
  created: function() {
    if (this.$props.dataUrl !== undefined) {
      axios
        .get(this.$props.dataUrl + "?id=" + this.$route.query.id)
        .then(rps => {
          this.record = rps.data;
        });
    }
  },
  mounted: function() {
    layui.use(["form", "layer", "layedit"], () => {
      let form = layui.form;
      let layer = layui.layer;
      let layedit = layui.layedit;
      let $ = layui.$;
      form.on("submit(*)", data => {
        $("[layedit-index]").each(function() {
          let index = $(this).attr("layedit-index");
          if (index == 0) return;
          let name = $(this).attr("name");
          data.field[name] = layedit.getContent(index);
        });
        let action = this.$props.action;
        if (this.$route.query.id) {
          action += "?id=" + this.$route.query.id;
        }
        axios({
          url: action,
          method: "post",
          data: data.field,
          transformRequest: [
            function(data) {
              let ret = "";
              for (let it in data) {
                ret +=
                  encodeURIComponent(it) +
                  "=" +
                  encodeURIComponent(data[it]) +
                  "&";
              }
              return ret;
            }
          ],
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }).then(rps => {
          let tips =
            Object.keys(rps.data).length !== 0 ? "操作成功" : "操作失败";
          layer.confirm(
            tips,
            {
              btn: ["关闭"]
            },
            index => {
              layer.close(index);
            }
          );
        });
      });
      form.render();
    });
  }
});

Vue.component("dz-search", {
  props: ["dataUrl", "action"],
  data() {
    return {
      record: {}
    };
  },
  render: function(createElement) {
    for (let key in this.record) {
      this.$slots.default.forEach(element => {
        let cptOptions = element.componentOptions;
        if (cptOptions !== undefined) {
          if (
            cptOptions.tag === "dz-input" ||
            cptOptions.tag === "dz-datepicker" ||
            cptOptions.tag === "dz-textarea"
          ) {
            if (cptOptions.propsData.name === key) {
              if (element.elm !== undefined) {
                element.elm.querySelector(
                  "[name=" + key + "]"
                ).value = this.record[key];
              }
            }
          }
        }
      });
    }
    let childrens = [this.$slots.default];
    if (this.record["photo"]) {
      childrens.push(
        createElement("input", {
          attrs: { type: "hidden", name: "photo", value: this.record["photo"] }
        })
      );
    }
    return createElement(
      "div",
      {
        class: { "layui-form": true }
      },
      childrens
    );
  },
  created: function() {
    if (this.$props.dataUrl !== undefined) {
      axios
        .get(this.$props.dataUrl + "?id=" + this.$route.query.id)
        .then(rps => {
          this.record = rps.data;
        });
    }
  },
  mounted: function() {
    layui.use(["form", "layer", "layedit"], () => {
      let form = layui.form;
      let layer = layui.layer;
      let layedit = layui.layedit;
      let $ = layui.$;
      form.on("submit(*)", data => {
        $("[layedit-index]").each(function() {
          let index = $(this).attr("layedit-index");
          if (index == 0) return;
          let name = $(this).attr("name");
          data.field[name] = layedit.getContent(index);
        });
        let action = this.$props.action;
        if (this.$route.query.id) {
          action += "?id=" + this.$route.query.id;
        }
        axios({
          url: action,
          method: "post",
          data: data.field,
          transformRequest: [
            function(data) {
              let ret = "";
              for (let it in data) {
                ret +=
                  encodeURIComponent(it) +
                  "=" +
                  encodeURIComponent(data[it]) +
                  "&";
              }
              return ret;
            }
          ],
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }).then(rps => {
          let tips =
            Object.keys(rps.data).length !== 0 ? "操作成功" : "操作失败";
          layer.confirm(
            tips,
            {
              btn: ["关闭"]
            },
            index => {
              layer.close(index);
            }
          );
        });
      });
      form.render();
    });
  }
});

Vue.component("dz-input", {
  props: ["label", "name", "placeholder", "value"],
  render(createElement) {
    let componentName = this.$parent.$options.name;
    switch (componentName) {
      case "dz-form":
        return createElement("div", { class: "layui-form-item" }, [
          createElement(
            "label",
            { class: "layui-form-label" },
            this.$props.label
          ),
          createElement("div", { class: "layui-input-block" }, [
            createElement("input", {
              class: "layui-input",
              attrs: {
                type: "text",
                name: this.$props.name,
                placeholder: this.$props.placeholder,
                value: this.$props.value,
                autocomplete: "off"
              }
            })
          ])
        ]);
        break;
      case "dz-search":
        return createElement("div", { class: "layui-inline" }, [
          createElement("div", { class: "layui-input-inline" }, [
            createElement("input", {
              class: "layui-input",
              attrs: {
                type: "text",
                name: this.$props.name,
                placeholder: this.$props.placeholder,
                value: this.$props.value,
                autocomplete: "off"
              }
            })
          ])
        ]);
        break;
    }
  }
});

Vue.component("dz-datepicker", {
  props: ["label", "name", "placeholder", "value", "options"],
  template: `
<div class="layui-form-item">
  <label class="layui-form-label">{{label}}</label>
  <div class="layui-input-block">
    <input type="text" :name="name" :placeholder="placeholder" autocomplete="off" class="layui-input layui-date" :value="value">
  </div>
</div>
  `,
  mounted() {
    let vm = this;
    layui.use("laydate", function() {
      let laydate = layui.laydate;
      let $ = layui.$;
      $(".layui-date").each(function() {
        let options = {
          elem: this,
          trigger: "click"
        };
        Object.assign(options, vm.$props.options);
        laydate.render(options);
      });
    });
  }
});

Vue.component("dz-password", {
  props: ["label", "name", "placeholder", "value"],
  template: `
<div class="layui-form-item">
  <label class="layui-form-label">{{label}}</label>
  <div class="layui-input-block">
    <input type="password" :name="name" :placeholder="placeholder" autocomplete="off" class="layui-input" :value="value"> 
  </div>
</div>  
  `
});

Vue.component("dz-submit", {
  template: `
<div class="layui-form-item">
  <label class="layui-form-label"></label>
  <div class="layui-input-block">
    <button type="button" class="layui-btn" lay-submit lay-filter="*" > 
      <slot></slot>
    </button>
  </div>
</div>  
  `,
  render(createElement) {
    let componentName = this.$parent.$options.name;
    switch (componentName) {
      case "dz-form":
        return createElement("div", { class: "layui-form-item" }, [
          createElement("div", { class: "layui-input-block" }, [
            createElement(
              "button",
              {
                class: "layui-btn",
                attrs: {
                  type: "button",
                  "lay-submit": "lay-submit",
                  "lay-filter": "*"
                }
              },
              [this.$slots.default]
            )
          ])
        ]);
        break;
      case "dz-search":
        return createElement("div", { class: "layui-inline" }, [
          createElement("button", { class: "layui-btn" }, [this.$slots.default])
        ]);
        break;
    }
  }
});

Vue.component("dz-textarea", {
  props: {
    label: String,
    name: {
      type: String,
      default: ""
    },
    placeholder: String,
    value: String,
    layeditId: {
      type: String,
      default: ""
    }
  },
  data() {
    return {
      layeditIndex: 0
    };
  },
  template: `
<div class="layui-form-item">
  <label class="layui-form-label">{{label}}</label>
  <div class="layui-input-block">
  <textarea :name="name" :id="layeditId" :layedit-index="layeditIndex" :placeholder="placeholder" class="layui-textarea">{{value}}</textarea>
  </div>
</div>  
  `,
  mounted() {
    if (this.$props.layeditId) {
      layui.use("layedit", () => {
        let layedit = layui.layedit;
        this.layeditIndex = layedit.build(this.$props.layeditId);
      });
    }
  }
});

Vue.component("dz-file-upload", {
  props: {
    label: String,
    name: String,
    placeholder: String,
    value: String,
    url: String,
    size: {
      type: String,
      default: ""
    },
    theme: {
      type: String,
      default: ""
    },
    buttonText: {
      type: String,
      default: "上传图片"
    }
  },
  template: `
<div class="layui-form-item">
  <label class="layui-form-label">{{label}}</label>
  <div class="layui-input-inline" style="width:300px">
    <input class="layui-input" :placeholder="placeholder" :name="name" :value="value?value:path">
  </div>
  <button type="button" style="float:left" :class="'layui-btn layui-btn-'+size+' layui-btn-'+theme" id="dz-file">{{buttonText}}</button>
</div>  
  `,
  data() {
    return {
      path: null
    };
  },
  mounted() {
    layui.use("upload", () => {
      layui.upload.render({
        elem: "#dz-file",
        url: this.$props.url,
        done: res => {
          this.path = res.path;
        }
      });
    });
  }
});

Vue.component("dz-select", {
  props: {
    label: String,
    name: String,
    placeholder: String,
    options: Array,
    value: String | Number
  },
  template: `
<div class="layui-form-item">
  <label class="layui-form-label">{{label}}</label>
  <div class="layui-input-block">
    <select :name="name" v-model="value">
      <option value="" v-if="placeholder">{{placeholder}}</option>
      <option v-for="(option, key) in options" :value="key">{{option}}</option>
    </select>
  </div>
</div>
  `
});
